@use 'sass:map';

@use 'common/var' as *;
@use 'mixins/mixins' as *;
@use 'mixins/var' as *;
@use 'mixins/_button';
@use 'mixins/utils' as *;

$checked-icon: "data:image/svg+xml;utf8,%3Csvg class='icon' width='12' height='12' viewBox='0 0 12 12' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='white' d='M9.58862 2.90283L10.3971 3.71133C10.4296 3.74383 10.4554 3.78242 10.473 3.82488C10.4906 3.86735 10.4996 3.91287 10.4996 3.95883C10.4996 4.0048 10.4906 4.05031 10.473 4.09278C10.4554 4.13524 10.4296 4.17383 10.3971 4.20633L5.17862 9.42483C5.14612 9.45734 5.10754 9.48312 5.06507 9.50071C5.0226 9.51831 4.97709 9.52736 4.93112 9.52736C4.88516 9.52736 4.83964 9.51831 4.79718 9.50071C4.75471 9.48312 4.71612 9.45734 4.68362 9.42483L1.70262 6.44383C1.67012 6.41133 1.64433 6.37275 1.62674 6.33028C1.60915 6.28781 1.6001 6.2423 1.6001 6.19633C1.6001 6.15037 1.60915 6.10485 1.62674 6.06239C1.64433 6.01992 1.67012 5.98133 1.70262 5.94883L2.51112 5.14083C2.54362 5.10833 2.58221 5.08254 2.62468 5.06495C2.66714 5.04736 2.71266 5.03831 2.75862 5.03831C2.80459 5.03831 2.8501 5.04736 2.89257 5.06495C2.93504 5.08254 2.97362 5.10833 3.00612 5.14083L4.93112 7.06533L9.09412 2.90233C9.12662 2.86983 9.16521 2.84404 9.20767 2.82645C9.25014 2.80886 9.29566 2.7998 9.34162 2.7998C9.38759 2.7998 9.4331 2.80886 9.47557 2.82645C9.51804 2.84404 9.55612 2.87033 9.58862 2.90283Z'%3E%3C/path%3E%3C/svg%3E";
$indeterminate-icon: "data:image/svg+xml;utf8,%3Csvg class='icon' width='8' height='2' viewBox='0 0 8 2' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='white' d='M0 0.4C0 0.179086 0.179086 0 0.4 0H7.6C7.82091 0 8 0.179086 8 0.4V1.6C8 1.82091 7.82091 2 7.6 2H0.4C0.179086 2 0 1.82091 0 1.6V0.4Z'%3E%3C/path%3E%3C/svg%3E";
$checkbox-height: () !default;
$checkbox-height: map.merge($common-component-size, $checkbox-height);

$checkbox-bordered-input-height: () !default;
$checkbox-bordered-input-height: map.merge(
  (
    'large': 16px,
    'default': 16px,
    'small': 12px,
  ),
  $checkbox-bordered-input-height
);

$checkbox-font-size: () !default;
$checkbox-font-size: map.merge(
  (
    'large': 14px,
    'small': 12px,
  ),
  $checkbox-font-size
);

$checkbox-bordered-input-width: () !default;
$checkbox-bordered-input-width: map.merge(
  $checkbox-bordered-input-height,
  $checkbox-bordered-input-width
);

@include b(checkbox) {
  @include set-component-css-var('checkbox', $checkbox);
}

@include b(checkbox) {
  color: getCssVar('checkbox-text-color');
  font-weight: getCssVar('checkbox-font-weight');
  font-size: getCssVar('font-size', 'base');
  position: relative;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  user-select: none;
  margin-right: 16px;
  height: 20px;

  @include when(disabled) {
    cursor: not-allowed;
  }

  @include when(bordered) {
    padding: 0 map.get($checkbox-bordered-padding-right, 'default')-$border-width
      0 map.get($checkbox-bordered-padding-left, 'default')-$border-width;
    border-radius: getCssVar('border-radius-base');
    border: getCssVar('border');
    box-sizing: border-box;

    &.is-checked {
      border-color: getCssVar('color-primary');
    }

    &.is-disabled {
      border-color: getCssVar('border-color-lighter');
    }
  }

  @include m(dark) {
    .#{$namespace}-checkbox__label {
      color: #EBEBEB;
    }
  }

  input:focus-visible {
    & + .#{$namespace}-checkbox__inner {
      outline: 2px solid getCssVar('checkbox-input-border-color-hover');
      outline-offset: 1px;
      border-radius: getCssVar('checkbox-border-radius');
    }
  }

  @include e(input) {
    white-space: nowrap;
    cursor: pointer;
    outline: none;
    display: inline-flex;
    position: relative;

    @include when(disabled) {
      .#{$namespace}-checkbox__inner {
        background-color: #EFF0F1;
        border-color: #BBBFC4;
        cursor: not-allowed;

        &::after {
          cursor: not-allowed;
          display: none;
          border-color: getCssVar('checkbox-disabled-icon-color');
        }
      }

      &.is-checked:not(.is-indeterminate) {
        .#{$namespace}-checkbox__inner {
          background-color: #BBBFC4;
          border-color: #BBBFC4;

          &::after {
            display: block;
            background-color: #EFF0F1;
          }
        }
      }

      &.is-indeterminate {
        .#{$namespace}-checkbox__inner {
          background-color: #BBBFC4;
          border-color: #BBBFC4;
          
          &::before {
            background-color: #EFF0F1;
          }
        }
      }

      & + span.#{$namespace}-checkbox__label {
        color: getCssVar('disabled-text-color');
        cursor: not-allowed;
      }
    }

    @include when(checked) {
      .#{$namespace}-checkbox__inner {
        background-color: getCssVar('checkbox-checked-bg-color');
        border-color: getCssVar('checkbox-checked-input-border-color');
      }
    }
    @include when(focus) {
      // Visually distinguish when focus
      &:not(.is-checked) {
        .#{$namespace}-checkbox__original:not(:focus-visible) {
          border-color: getCssVar('checkbox-input-border-color-hover');
        }
      }
    }
    @include when(indeterminate) {
      .#{$namespace}-checkbox__inner {
        background-color: getCssVar('checkbox-checked-bg-color');
        border-color: getCssVar('checkbox-checked-input-border-color');

        &::before {
          box-sizing: content-box;      
          transition: transform 0.15s ease-in 0.05s;
          content: '';
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          border-top: none;
          border-right: none;
          background-repeat: no-repeat;
          background-position: center;
          background-color: white;
          mask: url('#{$indeterminate-icon}') no-repeat;
          mask-size: 100% 100%;
          -webkit-mask: url('#{$indeterminate-icon}') no-repeat;
          -webkit-mask-size: 100% 100%;
          width: 8px;
          height: 2px;
        }

        &::after {
          display: none;
        }
      }
    }
  }
  @include e(inner) {
    display: inline-block;
    position: relative;
    border: getCssVar('checkbox-input-border');
    border-radius: getCssVar('checkbox-border-radius');
    box-sizing: border-box;
    width: getCssVar('checkbox-input-width');
    height: getCssVar('checkbox-input-height');
    background-color: getCssVar('checkbox-bg-color');
    z-index: getCssVar('index-normal');
    transition: border-color 0.25s cubic-bezier(0.71, -0.46, 0.29, 1.46),
      background-color 0.25s cubic-bezier(0.71, -0.46, 0.29, 1.46),
      outline 0.25s cubic-bezier(0.71, -0.46, 0.29, 1.46);

    &:hover {
      border-color: getCssVar('checkbox-input-border-color-hover');
    }

    &::after {
      box-sizing: content-box;      
      transition: transform 0.15s ease-in 0.05s;
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      border-top: none;
      border-right: none;
      background-repeat: no-repeat;
      background-position: center;
      background-color: white;
      mask: url('#{$checked-icon}') no-repeat;
      mask-size: 100% 100%;
      -webkit-mask: url('#{$checked-icon}') no-repeat;
      -webkit-mask-size: 100% 100%;
      width: 12px;
      height: 12px;
    }
  }

  @include e(original) {
    opacity: 0;
    outline: none;
    position: absolute;
    margin: 0;
    width: 0;
    height: 0;
    z-index: -1;
  }

  @include e(label) {
    display: inline-block;
    padding-left: 8px;
    line-height: 1;
    font-size: getCssVar('checkbox-font-size');
  }


  &:last-of-type {
    margin-right: 0;
  }
}
